<?xml version="1.0"?>
<ruleset name="Infinityloop">
    <description>Coding standard overriding few properties from PSR12</description>

    <arg name="extensions" value="php"/>
    <arg name="tab-width" value="4"/>
    <arg value="s"/> <!-- Display name of sniff used to detect/fix issue -->
    <arg value="p"/> <!-- Display progress -->
    <config name="installed_paths" value="../../slevomat/coding-standard"/><!-- relative path from PHPCS source location -->
    <file>./../</file>
    <exclude-pattern>*/tests/*/data/*</exclude-pattern>
    <exclude-pattern>*/vendor/*</exclude-pattern>
    <exclude-pattern>*/vendor-bin/*</exclude-pattern>

    <rule ref="PSR12">
        <exclude name="PSR12.Files.DeclareStatement"/>
        <exclude name="PSR12.Functions.ReturnTypeDeclaration"/>
        <exclude name="PSR12.ControlStructures.ControlStructureSpacing.FirstExpressionLine"/>
        <exclude name="PSR12.ControlStructures.ControlStructureSpacing.CloseParenthesisLine"/>
        <exclude name="PSR12.Files.ImportStatement.LeadingSlash"/>
        <exclude name="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket"/>
        <exclude name="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace"/>
        <exclude name="PSR2.Namespaces.UseDeclaration.SpaceAfterLastUse"/>
        <exclude name="PSR2.Namespaces.NamespaceDeclaration.BlankLineAfter"/>
    </rule>
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!-- empty catch statements are allowed -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/>
    </rule>
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Files.ByteOrderMark"/>
    <rule ref="Generic.Files.InlineHTML"/>
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Files.TypeNameMatchesFileName"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <!-- Force camelCase variables -->
    <rule ref="Squiz.NamingConventions.ValidVariableName">
        <exclude name="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore"/>
    </rule>
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.PHP.LowerCaseType"/>
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <rule ref="Squiz.PHP.InnerFunctions"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>
    <rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking"/>
    <rule ref="SlevomatCodingStandard.PHP.ReferenceSpacing">
        <properties>
            <property name="spacesCountAfterReference" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.PHP.RequireNowdoc"/>
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses">
        <properties>
            <property name="ignoreComplexTernaryConditions" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
    <rule ref="SlevomatCodingStandard.PHP.RequireExplicitAssertion"/>

    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="tabIndent" value="true"/>
        </properties>
    </rule>
    <rule ref="PEAR.Formatting.MultiLineAssignment"/>
    <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent"/>
    <rule ref="PSR1.Files.SideEffects"/>
    <rule ref="PSR1.Methods.CamelCapsMethodName"/>

    <rule ref="Generic.Classes.DuplicateClassName"/>
    <rule ref="PEAR.Classes.ClassDeclaration"/>
    <rule ref="PSR1.Classes.ClassDeclaration"/>
    <rule ref="Squiz.Classes.ClassFileName"/>
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <rule ref="Squiz.Classes.ValidClassName"/>
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0"/>
            <property name="linesCountBeforeClosingBrace" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements"/>

    <rule ref="SlevomatCodingStandard.Classes.SuperfluousTraitNaming"/>
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming">
        <exclude-pattern>SlevomatCodingStandard/Sniffs/ControlStructures/AbstractControlStructureSpacingSniff.php</exclude-pattern>
        <exclude-pattern>SlevomatCodingStandard/Sniffs/Namespaces/AbstractFullyQualifiedGlobalReference.php</exclude-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming"/>
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="0"/>
            <property name="linesCountBetweenUses" value="0"/>
            <property name="linesCountAfterLastUse" value="1"/>
            <property name="linesCountAfterLastUseWhenLastInClass" value="0"/>
        </properties>
        <exclude name="SlevomatCodingStandard.Classes.TraitUseSpacing.CountAfterLastUse"/>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding"/>

    <rule ref="Generic.Commenting.Todo"/>
    <rule ref="PEAR.Commenting.InlineComment"/>
    <rule ref="Squiz.Commenting.DocCommentAlignment">
        <exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/>
    </rule>
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>
    <rule ref="Squiz.Commenting.FunctionComment">
        <!-- @throws are forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>
        <!-- requires long boolean and integer parameters -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>
        <!-- collection syntax such as string[] is not supported -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint"/>
        <!-- enforces incorrect types -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>
        <!-- is not able to detect return types such as string|null as correct -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/>
        <!-- @throws are forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidThrows"/>
        <!-- PHPDoc is not required on all methods -->
        <exclude name="Squiz.Commenting.FunctionComment.Missing"/>
        <!-- comments are not required for @param -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>
        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>
        <!-- comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
        <!-- comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>
        <exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing"/><!-- works only for code requiring PHP 7 code or better -->
        <!-- we don't want spacing with alignment -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>
        <!-- we don't want spacing with alignment -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
        <!-- @throws are forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>
        <!-- @throws are forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNotCapital"/>
        <!-- doesn't work with self as typehint -->
        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.DuplicateReturn">
        <message>Only 1 @return annotation is allowed in a function comment</message>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.ExtraParamComment">
        <message>Extra @param annotation</message>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.InvalidNoReturn">
        <message>Function has no return statement, but annotation @return is present</message>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.MissingParamTag">
        <message>@param annotation for parameter "%s" missing</message>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration"/>
    <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@author"/>
                <element value="@created"/>
                <element value="@copyright"/>
                <element value="@license"/>
                <element value="@package"/>
                <element value="@version"/>
                <element value="@throws"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Commenting.UselessFunctionDocComment"/>

    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowEmpty"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing">
        <properties>
            <property name="tokensToCheck" type="array">
                <element value="T_SWITCH"/>
                <element value="T_TRY"/>
            </property>
            <property name="linesCountBeforeControlStructure" value="1"/>
            <property name="linesCountBeforeFirstControlStructure" value="0"/>
            <property name="linesCountAfterControlStructure" value="1"/>
            <property name="linesCountAfterLastControlStructure" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit">
        <properties>
            <property name="ignoreStandaloneIfInScope" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing">
        <properties>
            <property name="tokensToCheck" type="array">
                <element value="T_GOTO"/>
                <element value="T_THROW"/>
                <element value="T_YIELD"/>
                <element value="T_YIELD_FROM"/>
                <element value="T_CONTINUE"/>
                <element value="T_BREAK"/>
                <element value="T_RETURN"/>
            </property>
        </properties>
        <property name="linesCountBeforeControlStructure" value="1"/>
        <property name="linesCountBeforeFirstControlStructure" value="0"/>
        <property name="linesCountAfterControlStructure" value="0"/>
        <property name="linesCountAfterLastControlStructure" value="0"/>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator">
        <properties>
            <property name="lineLengthLimit" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn">
        <properties>
            <property name="assumeAllConditionExpressionsAreAlreadyBoolean" value="false"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator">
        <properties>
            <property name="assumeAllConditionExpressionsAreAlreadyBoolean" value="false"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>

    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses">
        <properties>
            <property name="psr12Compatible" value="true"/>
            <property name="caseSensitive" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation"/>
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing">
        <properties>
            <property name="linesCountBeforeNamespace" value="1"/>
            <property name="linesCountAfterNamespace" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="false"/>
            <property name="ignoredAnnotationNames" value="false"/>
            <property name="ignoredAnnotations" value="false"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants"/>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions"/>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameAfterKeyword">
        <properties>
            <property name="keywordsToCheck" type="array">
                <element value="T_EXTENDS"/>
                <element value="T_IMPLEMENTS"/>
                <element value="T_USE"/>
                <element value="T_NEW"/>
                <element value="T_THROW"/>
            </property>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedExceptions"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="1"/>
            <property name="linesCountBetweenUseTypes" value="0"/>
            <property name="linesCountAfterLastUse" value="1"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="2"/>
            <property name="newlinesCountAfterDeclare" value="2"/>
            <property name="spacesCountAroundEqualsSign" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <properties>
            <property name="enableObjectTypeHint" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
        <properties>
            <property name="enableNativeTypeHint" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
        <properties>
            <property name="enableObjectTypeHint" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint">
        <exclude-pattern>tests/</exclude-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>
    <rule ref="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax"/>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHintSpacing"/>

    <rule ref="Generic.Arrays.ArrayIndent">
        <exclude name="Generic.Arrays.ArrayIndent.CloseBraceNotNewLine"/>
    </rule>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Squiz.Arrays.ArrayBracketSpacing">
        <!-- does not handle nested array access across multiple lines -->
        <exclude name="Squiz.Arrays.ArrayBracketSpacing.SpaceBeforeBracket"/>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <!-- does not handle wrapped content -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine"/>
        <!-- expects closing brace at the same level as opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/>
        <!-- we don't want spacing with alignment -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/>
        <!-- expects multi-value array always written on multiple lines -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.FirstIndexNoNewline"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.FirstValueNoNewline"/>
        <!-- uses indentation of only single space -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/>
        <!-- even a single-value array can be written on multiple lines -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/>
        <!-- checked by SlevomatCodingStandard.Arrays.TrailingArrayComma -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoComma"/>
        <!-- expects multi-value array always written on multiple lines -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast"/>
        <!-- multiple values can be written on a single line -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>
        <!-- we don't want spacing with alignment -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>
    </rule>
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma">
        <properties>
            <property name="enableAfterHeredoc" value="false"/>
        </properties>
    </rule>

    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
        <!-- checked by SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing.MultipleSpacesBetweenTypeHintAndParameter -->
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint"/>
    </rule>
    <rule ref="Squiz.Functions.GlobalFunction"/>
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration">
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.NewlineBeforeOpenBrace"/>
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.SpaceAfterFunction"/>
    </rule>
    <rule ref="Squiz.Operators.IncrementDecrementUsage">
        <exclude name="Squiz.Operators.IncrementDecrementUsage.NoBrackets"/>
    </rule>
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    <rule ref="Squiz.Scope.MethodScope"/>
    <!-- Forbid `$this` inside static function -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
            <property name="spacing" value="1"/>
        </properties>
    </rule>
    <rule ref="Squiz.Strings.EchoedStrings"/>
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
            <property name="ignoreSpacingBeforeAssignments" value="false"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
    <!-- Forbid spaces before semicolon -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>
    <rule ref="Squiz.PHP.CommentedOutCode">
        <properties>
            <property name="maxPercentage" value="50"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly">
        <exclude-pattern>SlevomatCodingStandard/Sniffs/Exceptions/ReferenceThrowableOnlySniff.php</exclude-pattern>
    </rule>
    <rule ref="SlevomatCodingStandard.Functions.DisallowArrowFunction"/>
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure"/>
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter"/>
    <rule ref="SlevomatCodingStandard.Functions.TrailingCommaInCall"/>
    <rule ref="SlevomatCodingStandard.Numbers.DisallowNumericLiteralSeparator"/>
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
    <rule ref="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators"/>
    <rule ref="SlevomatCodingStandard.Operators.SpreadOperatorSpacing">
        <properties>
            <property name="spacesCountAfterOperator" value="0"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>
    <!-- Require one space between functions except after first and last -->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="spacingBeforeFirst" value="0"/>
            <property name="spacingAfterLast" value="0"/>
        </properties>
    </rule>
    <rule ref="InfinityloopCodingStandard.WhiteSpace.MemberVarSpacing">
        <properties>
            <property name="spacing" value="0"/>
            <property name="spacingBeforeFirst" value="0"/>
            <property name="ignoreFirstMemberVar" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
        <properties>
            <property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" value="true"/>
        </properties>
    </rule>
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="140"/>
            <property name="absoluteLineLimit" value="140"/>
            <property name="ignoreComments" value="true"/>
        </properties>
    </rule>
    <rule ref="InfinityloopCodingStandard.Classes.FinalClassVisibility"/>
    <rule ref="InfinityloopCodingStandard.Classes.ClassStructure"/>
</ruleset>
